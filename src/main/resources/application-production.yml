# APIのベースURIパス
api:
  base-path: /api/v1/sample

server:
  shutdown: graceful
  
  # 不要な機能の無効化
  error.whitelabel.enabled: false       # Whitelabelエラーページ
  servlet.jsp.registered: false         # JSPエンジン
  ssl.enabled: false

  tomcat:
    basedir: /tmp/springboot            # 展開パスの固定化(一時ディレクトリの大量生成によるi-node枯渇やディスクI/O性能劣化の抑制)
    
    # 不要な機能の無効化
    resource.allow-caching: false       # 静的コンテンツキャッシュ

    # セキュリティ対策
    accept-count: 1000                               # DoS攻撃(TCP SYN Flood)の緩和
    connection-timeout: 5000                         # DoS攻撃(Slow HTTP Attack)の緩和
    max-http-form-post-size: 2MB                    # DoS攻撃(Flooding)の緩和
    max-swallow-size: -1                             # Abort Uploadの抑制

spring:
  # Graceful Shutdown の待機時間
  lifecycle.timeout-per-shutdown-phase: 30s

# PostgreSQL
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DATABASE:postgres}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:password}
    initialization-mode: always
    hikari:
      auto-commit: false
      connection-timeout: 30000
      idle-timeout: 0
      max-lifetime: 0
      connection-test-query: SELECT 1
      minimum-idle: 10
      maximum-pool-size: ${DBMS_POOL_SIZE:10}
      pool-name: ConnectionPool
      initialization-fail-timeout: -1
      validation-timeout: 5000
      

#SDE-MSA-PRIN 監視が容易な設計にする (MSA-PRIN-CD-04)
# Spring Cloud Sleuth
  sleuth:
    sampler:
      probability: 1.0
# Zipkin
#  zipkin:
#    base-url: http://${ZIPKIN_HOST:localhost}:${ZIPKIN_PORT:9411}
#    sender:
#      type: web

#SDE-MSA-PRIN サービス呼び出し回数を制限する (MSA-PRIN-ID-04)
# Redis の設定を有効にする必要があります
#  cache:
#    type: redis
#    cache-names: http-client, postgres-domain, mongodb-domain
#    redis:
#      time-to-live: 86400

#SDE-MSA-PRIN ステートレスにする (MSA-PRIN-SD-01)
# Spring Session
#  session:
#    store-type: redis

#SDE-MSA-PRIN ステートレスにする (MSA-PRIN-SD-01)
#SDE-MSA-PRIN サービス呼び出し回数を制限する (MSA-PRIN-ID-04)
# Redis
#  redis:
#    host: ${REDIS_HOST:localhost}
#    port: ${REDIS_PORT:6379}
#    password: ${REDIS_PASSWORD:password}

  # Jackson設定: プロジェクトの開発標準として策定すべき項目
  jackson:
    property-naming-strategy: SNAKE_CASE       # JSON項目名の命名規則
    default-property-inclusion: ALWAYS         # JSON出力時にnull/empty値含め全ての項目を出力 
    # JSONパーサ設定(JSON入力の解析:JSONツリー化)
    parser:
      STRICT_DUPLICATE_DETECTION: true         # JSON解析中に項目名の重複を検知するとエラーとする
    # JSONデシリアライズ設定(JSONツリーをDTOにマッピング)
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: true         # DTOに未定義のフィールドを検知するとエラーとする
      FAIL_ON_NULL_FOR_PRIMITIVES: true        # プリミティブ型へのnull値の入力をエラーとする
      FAIL_ON_NUMBERS_FOR_ENUMS: true          # Enum型へのordinal値での入力をエラーとする
      FAIL_ON_READING_DUP_TREE_KEY: true       # 項目名の重複を検知するとエラーとする
      ACCEPT_FLOAT_AS_INT: false               # 浮動小数点を整数型にマッピングさせずエラーを返す
    # JSONシリアライズ設定(DTOをJSON文字列に変換)
    serialization:
      INDENT_OUTPUT: false                     # 出力時に改行・インデントしない
      WRITE_BIGDECIMAL_AS_PLAIN: true          # BigDecimal型を指数表記させない

  # ActiveMQ Configuration
  activemq:
    broker-url: ${AMQ_BROKER_URL:tcp://localhost:61616}         # URL of the ActiveMQ broker. Auto-generated by default..
    user: ${AMQ_USER:}                                          # Login user of the broker.
    password: ${AMQ_PASSWORD:}                                  # Login password of the broker.
    pool:
      enabled: true                                             # Whether a JmsPoolConnectionFactory should be created, instead of a regular ConnectionFactory. Default: false
      idle-timeout: 30000                                       # Connection idle timeout. (millieconds)  Default: 30000
      max-connections: ${AMQ_MAX_CONNECTIONS:1}                 # Maximum number of pooled connections. Default: 1
  # Spring JMS Configuration
  jms:
    listener:
      acknowledge-mode: auto                                    # Acknowledge mode for conainer. By default, the listener transcted to automatic acknowledgment.
      auto-startup: true                                        # Start the container automatically on startup. Default:true
      concurrency: ${AMQ_CONCURRENCY:1}                         # Minimum number of concurrent consumers.
      max-concurrency: ${AMQ_MAX_CONCURRENCY:1}                 # Maximum number of concurrent consumers.
    pub-sub-domain: false                                       # Whether the default destination type is topic. Default: false

resilience4j:
  # CircuitBreaker設定
  circuitbreaker:
    configs:
      # CircuitBreaker設定の既定値
      default:
        event-consumer-buffer-size: 10                                          # イベントバッファサイズ, 既定値:100, 下限値:1
        sliding-window-size: 10                                                 # SlidingWindowのサイズ(CLOSED状態の時に呼び出し結果を記録する), 既定値:100, 下限値:1
        # sliding-window-type: COUNT_BASED                                        # SlidingWindowの種類, 既定値:COUNT_BASED
        # 閉塞状態(OPEN)への遷移条件
        failure-rate-threshold: 50                                              # 失敗率の閾値(パーセント), 失敗発生率がこの値を超えるとCircuitBreakerがOPEN状態に遷移する, 既定値:50%, 有効値:1.0～100.0
        # slow-call-duration-threshold: 60s                                       # 応答遅延時間の閾値時間, この時間を超えて完了しない処理を応答遅延と判断する, 既定値:60秒
        # slow-call-rate-threshold: 100                                           # 応答遅延率の閾値(パーセント), 応答遅延率がこの値を超えるとCircuitBreakerがOPEN状態に遷移する, 既定値:50%, 有効値:1.0～100.0
        # minimum-number-of-calls: 100                                            # エラー率(失敗率, 応答遅延率)の算出前に必要なSlidingWindow内のリクエスト件数, 既定値:100, 下限値:1, 注意:ここで設定した件数に到達するまでのリクエストでエラーが発生してもCircuitBreakerをOPEN状態に遷移させることはできない
        # record-failure-predicate:                                               # 例外に基づいて失敗の判定を行うPredicateクラス名(FQCN)
        # record-exceptions: []                                                   # 失敗としてカウントする例外クラス名(FQCN)の一覧
        # ignore-exceptions: []                                                   # 失敗としてカウントしない例外クラス名(FQCN)の一覧
        # 復旧試行状態(HALF_OPEN)への遷移条件
        automatic-transition-from-open-to-half-open-enabled: true               # trueを指定すると遷移条件の監視スレッドを起動し、wait-duration-in-open-state時間が経過すると自動的にHALF_OPEN状態に遷移させる, falseを指定するとwait-duration-in-open-state時間が経過後の新しいリクエスト実行時に遷移させる
        wait-duration-in-open-state: 5s                                         # OPEN状態からHALF_OPEN状態への遷移を待機する時間, 既定値:60秒, 下限値:1ミリ秒
        # max-wait-duration-in-half-open-state: 0                                 # OPEN状態に遷移する前に、HALF_OPEN状態にとどまることができる最大待機時間, 既定値:0(許可されたすべての呼び出しが完了するまで、HALF_OPEN状態を維持し続ける)
        permitted-number-of-calls-in-half-open-state: 10                        # HALF_OPEN状態の時に許可される呼び出しの上限数, 既定値:10, 下限値:1
        # 運用監視
        # writable-stack-trace-enabled: true                                      # Boolean
        allow-health-indicator-to-fail: true                                    # Boolean
        register-health-indicator: true                                         # Boolean
        # リトライ制御
        # enable-exponential-backoff: false                                       # trueを指定するとリトライ制御をExponential backoff and jitterとして構成する, 既定値:なし
        # exponential-backoff-multiplier:                                         # Exponential backoff and jitterにおけるリトライ間隔の乗数, 既定値:なし, 有効値:Double型
        # exponential-max-wait-duration-in-open-state:                            # Duration
        # enable-randomized-wait: false                                           # trueを指定するとリトライ制御をランダム時間で構成する, 既定値:なし, 注意:enable-exponential-backoffが無効(未設定 or false)の場合のみ設定可能
        # randomized-wait-factor:                                                 # Double
    instances:
      postgres:
        base-config: default
      httpclient:
        base-config: default
    metrics:
      enabled: true

# Bulkhead
resilience4j.thread-pool-bulkhead:
  configs:
    default:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1
  instances:
    postgres:
      baseConfig: default
    httpclient:
      baseConfig: default

logging:
  level:
    # 開発向けのデバッグログ
    org.springframework.web.servlet.DispatcherServlet: DEBUG
    jp.co.ana.cas.template.repository.dao.postgres.mapper.SamplePostgresMapper: DEBUG
    jp.co.ana.cas.template.repository.service.http.SampleHttpClient: DEBUG
  pattern:
    console: 'time:%d{yyyy-MM-dd HH:mm:ss.SSS}\tseverity:%5p\tspan:[${spring.application.name:-},%X{traceId},%X{spanId}]\tpid:${PID:- }\tthread:[%15.15t]\tclass:%-40.40logger{39}\tmessage:%m%n'

secure:
  cookie: true

management:
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, prometheus, refresh, info
  endpoint:
    # ヘルスチェックエンドポイントの設定
    health:
      probes.enabled: true
      show-details: always
  health:
    defaults.enabled: false
    ping.enabled: true
    db.enabled: true
    mongo.enabled: true
    binders.enabled: true

#server:
#  session:
#    timeout: 1800

external-service:
  services:
    sample:
      base-url: ${EXTERNAL_SERVICE_SAMPLE_BASE_URL:http://localhost:8081/api/v1/sample/postgres}

feign:
  # FeignClient の設定
  client:
    default-to-properties: true
    default-config: default
    config:
      # 既定値
      default:
        loggerLevel: full                                  # DEBUGログの出力内容(none, basic, headers, full)
        connectTimeout: 10000                              # 既定値:10秒(org.springframework.cloud.openfeign.FeignClientFactoryBean)
        readTimeout: 60000                                 # 既定値:60秒(org.springframework.cloud.openfeign.FeignClientFactoryBean)
        retryer:                                           # 既定値なし(リトライしない)
        errorDecoder:                                      # 既定値なし
        requestInterceptors:                               # 既定値なし, インターセプタークラスのFQCN一覧(カンマ区切り)
        decode404: false                                   # 404を受信した時の振る舞い(false:FeignExceptionをスロー, true:nullまたはOptionalsでラップされた型で返す)
        decoder:                                           # 既定値なし
        encoder:                                           # 既定値なし
        contract:                                          # 既定値なし
        exceptionPropagationPolicy: none                   # 既定値なし(none, unwrap)
        defaultRequestHeaders:                             # リクエストに追加する既定のヘッダ
          Content-Type: application/json
          X-Requested-With: XMLHttpRequest
  # CloseableHttpClient の設定(Apache HttpComponent)
  httpclient:
    enabled: true
    disable-ssl-validation: false
    max-connections: 200
    max-connections-per-route: 50
    time-to-live: 900
    time-to-live-unit: SECONDS
    follow-redirects: true
    connection-timeout: 2000                               # 
    connection-timer-repeat: 3000                          # 
  # OkHttp の設定(利用しないため無効化)
  okhttp:
    enabled: false
  # GZIP圧縮
  compression:
    request:
      enabled: false                                        # true:リクエストデータのGZIP圧縮を有効化
      mime-types: text/xml,application/xml,application/json # GZIP圧縮をサポートするMIMEタイプ
      min-request-size: 2048                                # GZIP圧縮の対象とするリクエストデータの下限値(byte)
    response:
      enabled: false                                        # true:レスポンスデータのGZIP圧縮を有効化
      useGzipDecoder: false
  # Hystrix の設定(Resilience4j を利用するため無効化)
  hystrix.enabled: false

# MyBatisの設定
mybatis:
  config-location: classpath:mybatis-config.xml

# OpenAPI / Swagger Settings
springdoc:
  api-docs:
    enabled: false
    path: /v3/api-docs
  swagger-ui:
    enabled: false
    path: /swagger-ui.html
api-docs:
  title: MSテンプレート APIインタフェース仕様
  description: PostgreSQLとデータの送受信を行います。
  version: "0.0.1"

# アクセスログの設定
accesslog:
  output:
    content-types: application/json
